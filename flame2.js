// Generated by CoffeeScript 1.3.1
(function() {
  var COOL_RATE, HEIGHT, PRECISION, RANDOMNESS, SPEED, WIDTH, buf, canvas, context, data, drawFire, emit, imageData, mouseDown, n, palCol, palette,
    _this = this;

  WIDTH = 550;

  HEIGHT = 320;

  COOL_RATE = 0.073;

  PRECISION = 5000;

  SPEED = 50;

  RANDOMNESS = 100;

  palCol = function(intensity) {
    var b, g, r;
    r = Math.min(intensity, 85) * 3;
    intensity = Math.max(intensity - 85, 0);
    g = Math.min(intensity, 85) * 3;
    intensity = Math.max(intensity - 85, 0);
    b = Math.min(intensity, 85) * 3;
    return [r, g, b];
  };

  palette = (function() {
    var _i, _results;
    _results = [];
    for (n = _i = 0; _i <= 255; n = ++_i) {
      _results.push(palCol(n));
    }
    return _results;
  })();

  canvas = document.getElementById('canvas');

  context = canvas.getContext('2d');

  canvas.width = WIDTH;

  canvas.height = HEIGHT;

  imageData = context.getImageData(0, 0, WIDTH, HEIGHT);

  data = imageData.data;

  buf = [[]];

  emit = [[]];

  mouseDown = false;

  drawFire = function(x, y) {
    var xx, yy, _i, _ref, _results;
    _results = [];
    for (yy = _i = y, _ref = y + 3; y <= _ref ? _i <= _ref : _i >= _ref; yy = y <= _ref ? ++_i : --_i) {
      _results.push((function() {
        var _j, _name, _ref1, _ref2, _results1;
        _results1 = [];
        for (xx = _j = _ref1 = x - 3, _ref2 = x + 3; _ref1 <= _ref2 ? _j <= _ref2 : _j >= _ref2; xx = _ref1 <= _ref2 ? ++_j : --_j) {
          emit[_name = HEIGHT - yy] || (emit[_name] = []);
          _results1.push(emit[HEIGHT - yy][xx] = PRECISION * 0.9);
        }
        return _results1;
      })());
    }
    return _results;
  };

  canvas.addEventListener('mousemove', (function(e) {
    if (mouseDown) {
      return drawFire(e.x, e.y);
    }
  }), false);

  canvas.addEventListener('mousedown', (function() {
    return mouseDown = true;
  }), false);

  canvas.addEventListener('mouseup', (function() {
    return mouseDown = false;
  }), false);

  setInterval(function() {
    var col, index, n, x, y, _i, _j, _k, _ref, _ref1, _ref2, _ref3;
    for (n = _i = 0; 0 <= RANDOMNESS ? _i <= RANDOMNESS : _i >= RANDOMNESS; n = 0 <= RANDOMNESS ? ++_i : --_i) {
      buf[0][Math.round(Math.random() * (WIDTH - 1))] = Math.round(Math.random() * PRECISION) + PRECISION * 0.15;
    }
    for (x = _j = 0, _ref = WIDTH - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; x = 0 <= _ref ? ++_j : --_j) {
      for (y = _k = 1, _ref1 = HEIGHT - 1; 1 <= _ref1 ? _k <= _ref1 : _k >= _ref1; y = 1 <= _ref1 ? ++_k : --_k) {
        buf[y] || (buf[y] = []);
        buf[y][x] = ((buf[y - 1][x - 1] || 0) + (buf[y - 1][x] || 0) + (buf[y - 1][x + 1] || 0) + (((_ref2 = buf[y - 2]) != null ? _ref2[x] : void 0) || 0)) / (4 + COOL_RATE);
        if ((_ref3 = emit[y]) != null ? _ref3[x] : void 0) {
          buf[y][x] = emit[y][x];
          emit[y][x] -= PRECISION * 0.004;
          if (emit[y][x] <= 0) {
            emit[y][x] = null;
          }
        }
        col = Math.round(buf[y][x] / PRECISION * 255) & 0xff;
        index = ((HEIGHT - y) * WIDTH + x) * 4;
        data[index] = palette[col][0];
        data[++index] = palette[col][1];
        data[++index] = palette[col][2];
        data[++index] = 255;
      }
    }
    return context.putImageData(imageData, 0, 0);
  }, SPEED);

}).call(this);
